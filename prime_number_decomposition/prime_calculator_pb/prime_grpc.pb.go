// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prime_calculator_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PrimeDecomposerServiceClient is the client API for PrimeDecomposerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeDecomposerServiceClient interface {
	// Server Streaming
	PrimeDecomposer(ctx context.Context, in *PrimeDecomposerRequest, opts ...grpc.CallOption) (PrimeDecomposerService_PrimeDecomposerClient, error)
}

type primeDecomposerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeDecomposerServiceClient(cc grpc.ClientConnInterface) PrimeDecomposerServiceClient {
	return &primeDecomposerServiceClient{cc}
}

func (c *primeDecomposerServiceClient) PrimeDecomposer(ctx context.Context, in *PrimeDecomposerRequest, opts ...grpc.CallOption) (PrimeDecomposerService_PrimeDecomposerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrimeDecomposerService_serviceDesc.Streams[0], "/greet.PrimeDecomposerService/PrimeDecomposer", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecomposerServicePrimeDecomposerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeDecomposerService_PrimeDecomposerClient interface {
	Recv() (*PrimeDecomposerResponse, error)
	grpc.ClientStream
}

type primeDecomposerServicePrimeDecomposerClient struct {
	grpc.ClientStream
}

func (x *primeDecomposerServicePrimeDecomposerClient) Recv() (*PrimeDecomposerResponse, error) {
	m := new(PrimeDecomposerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeDecomposerServiceServer is the server API for PrimeDecomposerService service.
// All implementations must embed UnimplementedPrimeDecomposerServiceServer
// for forward compatibility
type PrimeDecomposerServiceServer interface {
	// Server Streaming
	PrimeDecomposer(*PrimeDecomposerRequest, PrimeDecomposerService_PrimeDecomposerServer) error
	mustEmbedUnimplementedPrimeDecomposerServiceServer()
}

// UnimplementedPrimeDecomposerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeDecomposerServiceServer struct {
}

func (UnimplementedPrimeDecomposerServiceServer) PrimeDecomposer(*PrimeDecomposerRequest, PrimeDecomposerService_PrimeDecomposerServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeDecomposer not implemented")
}
func (UnimplementedPrimeDecomposerServiceServer) mustEmbedUnimplementedPrimeDecomposerServiceServer() {
}

// UnsafePrimeDecomposerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeDecomposerServiceServer will
// result in compilation errors.
type UnsafePrimeDecomposerServiceServer interface {
	mustEmbedUnimplementedPrimeDecomposerServiceServer()
}

func RegisterPrimeDecomposerServiceServer(s grpc.ServiceRegistrar, srv PrimeDecomposerServiceServer) {
	s.RegisterService(&_PrimeDecomposerService_serviceDesc, srv)
}

func _PrimeDecomposerService_PrimeDecomposer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeDecomposerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeDecomposerServiceServer).PrimeDecomposer(m, &primeDecomposerServicePrimeDecomposerServer{stream})
}

type PrimeDecomposerService_PrimeDecomposerServer interface {
	Send(*PrimeDecomposerResponse) error
	grpc.ServerStream
}

type primeDecomposerServicePrimeDecomposerServer struct {
	grpc.ServerStream
}

func (x *primeDecomposerServicePrimeDecomposerServer) Send(m *PrimeDecomposerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PrimeDecomposerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.PrimeDecomposerService",
	HandlerType: (*PrimeDecomposerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeDecomposer",
			Handler:       _PrimeDecomposerService_PrimeDecomposer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prime.proto",
}
